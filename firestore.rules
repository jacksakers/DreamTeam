rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if a user is already a member of a household
    function isHouseholdMember(householdId) {
      return request.auth != null && get(/databases/$(database)/documents/households/$(householdId)).data.members.hasAny([request.auth.uid]);
    }

    // Rules for user profiles
    match /users/{userId} {
      // A user can read/write their own document
      allow read, write: if request.auth.uid == userId;
    }

    // Rules for the households collection
    match /households/{householdId} {
      // Allow any authenticated user to read a household's info (e.g., its name for the join page)
      allow read: if request.auth != null;

      // Allow updates under specific conditions
      allow update: if
        // Condition 1: User is already a member (allows them to change the name or leave)
        isHouseholdMember(householdId) ||
        // Condition 2: User is adding THEMSELVES to a household they are not yet in.
        (
          !isHouseholdMember(householdId) &&
          request.resource.data.members.hasAll(resource.data.members) &&
          request.resource.data.members.hasOnly(resource.data.members.concat([request.auth.uid]))
        );

      // Creating new households
      allow create: if request.auth.uid in request.resource.data.members;
    }

    match /shoppingLists/{listId} {
      allow read, write, create: if 
        request.auth != null && 
        isHouseholdMember(request.resource.data.householdId);
    }
    
    match /events/{eventID} {
      allow read, write, create: if request.auth != null;
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
